"Definice enumů"
enum AddressType {
    Home
    Work
    Billing
    Shipping
}

enum ContactType {
    Phone
    Email
    Other
    Website
}

enum SeniorityType {
    Hard
    Soft
}

enum SeniorityLevel {
    Junior
    Medior
    Senior
    Expert
}

enum BenefitType {
    Material
    NonMaterial
}

enum BenefitPeriod {
    Daily
    Monthly
    Yearly
}

enum ContractType {
    Framework
    Order
    Subscription
    Service
    Other
}

enum AssignmentExpertiseType {
    Used
    Acquired
}

enum OperationType {
    INSERT
    UPDATE
    DELETE
}

enum PaymentStatus {
    Pending
    Paid
    Failed
    Canceled
}

enum PaymentMethod {
    BankTransfer
    Cash
    Crypto
    Other
}

enum RelationshipType {
    HPP
    DPP
    ICO
    SRO
}

enum MaritalStatus {
    Single
    Married
    Divorced
    Widowed
}

"Definice typů entit"
type Address {
    addressID: Int!
    street: String!
    city: String!
    state: String!
    postalCode: String!
    country: String!
    latitude: Float!
    longitude: Float!
    addressType: AddressType!
    createdAt: String!
    updatedAt: String!
}

type Contact {
    contactID: Int!
    contactName: String!
    contactType: ContactType!
    contactValue: String!
    isPrimary: Boolean!
    createdAt: String!
    updatedAt: String!
}

type Company {
    companyID: Int!
    companyName: String!
    registrationNumber: String
    taxID: String
    industry: String
    addressID: Int
    createdAt: String!
    updatedAt: String!
}

type CompaniesContacts {
    companyId: Int!
    contactId: Int!
    company: Company
    contact: Contact
}

type ExpertContacts {
    expertId: Int!
    contactId: Int!
    expert: Expert
    contact: Contact
}

type Expertise {
    expertiseID: Int!
    name: String!
    type: SeniorityType!
    description: String
    createdAt: String!
}

type Expert {
    expertID: Int!
    firstName: String!
    lastName: String!
    personalID: String
    birthDate: String
    addressID: Int
    contactID: Int
    email: String!
    specialization: String
    level: SeniorityLevel!
    marketHourlyRate: Float!
    marketDailyRate: Float!
    educationLevel: String
    createdAt: String!
}

type Payment {
    paymentID: Int!
    expertID: Int!
    paymentDate: String!
    periodStart: String!
    periodEnd: String!
    grossAmount: Float!
    netAmount: Float
    taxAmount: Float
    bonus: Float
    reimbursement: Float
    currency: String!
    paymentStatus: PaymentStatus!
    paymentMethod: PaymentMethod!
    notes: String
    createdAt: String!
    updatedAt: String!
}

type ExpertVehicles {
    vehicleID: Int!
    expertID: Int!
    brand: String!
    model: String!
    color: String!
    licensePlate: String!
}

type CompanyDevices {
    deviceID: Int!
    deviceType: String!
    name: String
    serialNumber: String
    purchasePrice: Float!
    assignedExpertID: Int
}

type ExpertExpertise {
    expertExpertiseID: Int!
    expertID: Int!
    expertiseID: Int!
    level: SeniorityLevel!
    acquiredDate: String
    certificate: String
}

type ExpertBenefits {
    benefitID: Int!
    expertID: Int!
    benefitName: String!
    benefitType: BenefitType!
    period: BenefitPeriod!
    cost: Float!
}

type Teams {
    teamID: Int!
    teamName: String!
    teamOfficeId: String
    teamLeaderID: Int
    createdAt: String!
}

type TeamExperts {
    teamID: Int!
    expertID: Int!
    assignedAt: String!
}

type Contracts {
    contractID: Int!
    contractNumber: String!
    contractType: ContractType!
    title: String!
    validFrom: String!
    validTo: String
    documentLink: String
    createdAt: String!
    updatedAt: String!
}

type CompanyCustomerContracts {
    customerContractID: Int!
    contractID: Int!
    companyID: Int!
    totalValue: Float!
    contract: Contracts!
    company: Company
}

type CompanySuppliersContracts {
    internalContractID: Int!
    contractID: Int!
    companyID: Int!
    monthlyCost: Float!
    contract: Contracts!
    company: Company
}

type ExpertOrders {
    expertOrderID: Int!
    customerContractID: Int!
    expertID: Int!
    orderDate: String!
    totalPrice: Float!
    createdAt: String!
}

type ExpertContracts {
    expertContractID: Int!
    expertID: Int!
    contractID: Int!
    relationshipType: RelationshipType!
    startDate: String
    endDate: String
    maritalStatus: MaritalStatus
    hasChildren: Boolean
    vacationDays: Int
    remoteAllowed: Boolean!
    guaranteedUtilization: Boolean!
    utilizationPercentage: Float
    monthlySalary: Float
    hourlyRate: Float
    bonusHourlyRate: Float
    documentCollectionLink: String
    isValid: Boolean!
    notes: String
    createdAt: String!
    updatedAt: String!
    expert: Expert
    contract: Contracts
}

type Pricing {
    pricingID: Int!
    companyID: Int
    expertID: Int
    teamID: Int
    offeredPrice: Float!
    margin: Float!
    validFrom: String!
    validTo: String
    pricingVersion: Int!
    createdAt: String!
    assignment: Assignment!
}

type Assignment {
    assignmentID: Int!
    expertID: Int!
    companyID: Int!
    startDate: String!
    endDate: String
    description: String
    pricing: Pricing!
}

type AssignmentExpertise {
    assignmentExpertiseID: Int!
    assignmentID: Int!
    expertiseID: Int!
    type: AssignmentExpertiseType!
}

type AuditLogs {
    auditLogID: Int!
    tableName: String!
    operationType: OperationType!
    recordID: Int!
    changedAt: String!
    changedBy: String
}

"Definice vstupních typů"
input AddressInput {
    street: String!
    city: String!
    state: String!
    postalCode: String!
    country: String!
    latitude: Float!
    longitude: Float!
    addressType: AddressType!
}

input ContactInput {
    contactName: String!
    contactType: ContactType!
    contactValue: String!
    isPrimary: Boolean!
}

input CompanyInput {
    companyName: String!
    registrationNumber: String
    taxID: String
    industry: String
    addressID: Int
}

input CompaniesContactsInput {
    companyId: Int!
    contactId: Int!
}

input ExpertContactsInput {
    expertId: Int!
    contactId: Int!
}

input ExpertiseInput {
    name: String!
    type: SeniorityType!
    description: String
}

input ExpertInput {
    firstName: String!
    lastName: String!
    personalID: String
    birthDate: String
    addressID: Int
    contactID: Int
    email: String!
    specialization: String
    level: SeniorityLevel!
    marketHourlyRate: Float!
    marketDailyRate: Float!
    educationLevel: String
}

input PaymentInput {
    expertID: Int!
    paymentDate: String!
    periodStart: String!
    periodEnd: String!
    grossAmount: Float!
    netAmount: Float
    taxAmount: Float
    bonus: Float
    reimbursement: Float
    currency: String!
    paymentStatus: PaymentStatus!
    paymentMethod: PaymentMethod!
    notes: String
}

input ExpertVehiclesInput {
    expertID: Int!
    brand: String!
    model: String!
    color: String!
    licensePlate: String!
}

input CompanyDevicesInput {
    deviceType: String!
    name: String
    serialNumber: String
    purchasePrice: Float!
    assignedExpertID: Int
}

input ExpertExpertiseInput {
    expertID: Int!
    expertiseID: Int!
    level: SeniorityLevel!
    acquiredDate: String
    certificate: String
}

input ExpertBenefitsInput {
    expertID: Int!
    benefitName: String!
    benefitType: BenefitType!
    period: BenefitPeriod!
    cost: Float!
}

input TeamsInput {
    teamName: String!
    teamOfficeId: String
    teamLeaderID: Int
}

input TeamExpertsInput {
    teamID: Int!
    expertID: Int!
    assignedAt: String
}

input ContractInput {
    contractNumber: String!
    contractType: ContractType!
    title: String!
    validFrom: String!
    validTo: String
    documentLink: String
}

input CompanyCustomerContractsInput {
    contractID: Int!
    companyID: Int!
    totalValue: Float!
}

input CompanySuppliersContractsInput {
    contractID: Int!
    companyID: Int!
    monthlyCost: Float!
}

input ExpertContractInput {
    expertID: Int!
    contractID: Int!
    relationshipType: RelationshipType!
    startDate: String
    endDate: String
    maritalStatus: MaritalStatus
    hasChildren: Boolean
    vacationDays: Int
    remoteAllowed: Boolean = false
    guaranteedUtilization: Boolean = false
    utilizationPercentage: Float
    monthlySalary: Float
    hourlyRate: Float
    bonusHourlyRate: Float
    documentCollectionLink: String
    isValid: Boolean = true
    notes: String
}

input ExpertOrdersInput {
    customerContractID: Int!
    expertID: Int!
    orderDate: String!
    totalPrice: Float!
}

input PricingInput {
    companyID: Int
    expertID: Int
    teamID: Int
    offeredPrice: Float!
    margin: Float!
    validFrom: String!
    validTo: String
    pricingVersion: Int
}

input AssignmentInput {
    expertID: Int!
    companyID: Int!
    startDate: String!
    endDate: String
    description: String
    pricingID: Int!
}

input AssignmentExpertiseInput {
    assignmentID: Int!
    expertiseID: Int!
    type: AssignmentExpertiseType!
}

input AuditLogsInput {
    tableName: String!
    operationType: OperationType!
    recordID: Int!
    changedAt: String
    changedBy: String
}

"Definice kořenových typů dotazů a mutací"
type Query {
    addresses: [Address!]!
    address(id: Int!): Address
    contacts: [Contact!]!
    contact(id: Int!): Contact
    companies: [Company!]!
    company(id: Int!): Company
    experts: [Expert!]!
    expert(id: Int!): Expert
    companiesContacts: [CompaniesContacts!]!
    companiesContactsByIds(companyId: Int!, contactId: Int!): CompaniesContacts
    expertContacts: [ExpertContacts!]!
    expertContactsByIds(expertId: Int!, contactId: Int!): ExpertContacts
    expertises: [Expertise!]!
    expertise(id: Int!): Expertise
    expertVehicles: [ExpertVehicles!]!
    expertVehicle(id: Int!): ExpertVehicles
    companyDevices: [CompanyDevices!]!
    companyDevice(id: Int!): CompanyDevices
    expertExpertises: [ExpertExpertise!]!
    expertExpertise(id: Int!): ExpertExpertise
    expertBenefits: [ExpertBenefits!]!
    expertBenefit(id: Int!): ExpertBenefits
    teams: [Teams!]!
    team(id: Int!): Teams
    teamExperts: [TeamExperts!]!
    teamExpert(teamID: Int!, expertID: Int!): TeamExperts
    contracts: [Contracts!]!
    contract(id: Int!): Contracts
    companyCustomerContracts: [CompanyCustomerContracts!]!
    companyCustomerContract(id: Int!): CompanyCustomerContracts
    companySuppliersContracts: [CompanySuppliersContracts!]!
    companySuppliersContract(id: Int!): CompanySuppliersContracts
    expertContracts: [ExpertContracts!]!
    expertContract(id: Int!): ExpertContracts
    expertOrders: [ExpertOrders!]!
    expertOrder(id: Int!): ExpertOrders
    pricing: [Pricing!]!
    price(id: Int!): Pricing
    payments: [Payment!]!
    payment(id: Int!): Payment
    assignments: [Assignment!]!
    assignment(id: Int!): Assignment
    assignmentExpertises: [AssignmentExpertise!]!
    assignmentExpertise(id: Int!): AssignmentExpertise
    auditLogs: [AuditLogs!]!
    auditLog(id: Int!): AuditLogs
}

type Mutation {
    securedAction(data: String!): String!

    createAddress(input: AddressInput!): Address!
    updateAddress(id: Int!, input: AddressInput!): Address!
    deleteAddress(id: Int!): Boolean!

    createContact(input: ContactInput!): Contact!
    updateContact(id: Int!, input: ContactInput!): Contact!
    deleteContact(id: Int!): Boolean!

    createCompany(input: CompanyInput!): Company!
    updateCompany(id: Int!, input: CompanyInput!): Company!
    deleteCompany(id: Int!): Boolean!

    createExpert(input: ExpertInput!): Expert!
    updateExpert(id: Int!, input: ExpertInput!): Expert!
    deleteExpert(id: Int!): Boolean!

    createPayment(input: PaymentInput!): Payment!
    updatePayment(id: Int!, input: PaymentInput!): Payment!
    deletePayment(id: Int!): Boolean!

    createCompaniesContacts(input: CompaniesContactsInput!): CompaniesContacts!
    deleteCompaniesContacts(companyId: Int!, contactId: Int!): Boolean!

    createExpertContacts(input: ExpertContactsInput!): ExpertContacts!
    deleteExpertContacts(expertId: Int!, contactId: Int!): Boolean!

    createExpertise(input: ExpertiseInput!): Expertise!
    updateExpertise(id: Int!, input: ExpertiseInput!): Expertise!
    deleteExpertise(id: Int!): Boolean!

    createExpertVehicles(input: ExpertVehiclesInput!): ExpertVehicles!
    updateExpertVehicles(id: Int!, input: ExpertVehiclesInput!): ExpertVehicles!
    deleteExpertVehicles(id: Int!): Boolean!

    createCompanyDevices(input: CompanyDevicesInput!): CompanyDevices!
    updateCompanyDevices(id: Int!, input: CompanyDevicesInput!): CompanyDevices!
    deleteCompanyDevices(id: Int!): Boolean!

    createExpertExpertise(input: ExpertExpertiseInput!): ExpertExpertise!
    updateExpertExpertise(id: Int!, input: ExpertExpertiseInput!): ExpertExpertise!
    deleteExpertExpertise(id: Int!): Boolean!

    createExpertBenefits(input: ExpertBenefitsInput!): ExpertBenefits!
    updateExpertBenefits(id: Int!, input: ExpertBenefitsInput!): ExpertBenefits!
    deleteExpertBenefits(id: Int!): Boolean!

    createTeams(input: TeamsInput!): Teams!
    updateTeams(id: Int!, input: TeamsInput!): Teams!
    deleteTeams(id: Int!): Boolean!

    createTeamExperts(input: TeamExpertsInput!): TeamExperts!
    deleteTeamExperts(teamID: Int!, expertID: Int!): Boolean!

    createContract(input: ContractInput!): Contracts!
    updateContract(id: Int!, input: ContractInput!): Contracts!
    deleteContract(id: Int!): Boolean!

    createCompanyCustomerContracts(input: CompanyCustomerContractsInput!): CompanyCustomerContracts!
    updateCompanyCustomerContracts(id: Int!, input: CompanyCustomerContractsInput!): CompanyCustomerContracts!
    deleteCompanyCustomerContracts(id: Int!): Boolean!

    createCompanySuppliersContracts(input: CompanySuppliersContractsInput!): CompanySuppliersContracts!
    updateCompanySuppliersContracts(id: Int!, input: CompanySuppliersContractsInput!): CompanySuppliersContracts!
    deleteCompanySuppliersContracts(id: Int!): Boolean!

    createExpertContract(input: ExpertContractInput!): ExpertContracts!
    updateExpertContract(id: Int!, input: ExpertContractInput!): ExpertContracts!
    deleteExpertContract(id: Int!): Boolean!

    createExpertOrders(input: ExpertOrdersInput!): ExpertOrders!
    updateExpertOrders(id: Int!, input: ExpertOrdersInput!): ExpertOrders!
    deleteExpertOrders(id: Int!): Boolean!

    createPricing(input: PricingInput!): Pricing!
    updatePricing(id: Int!, input: PricingInput!): Pricing!
    deletePricing(id: Int!): Boolean!

    createAssignment(input: AssignmentInput!): Assignment!
    updateAssignment(id: Int!, input: AssignmentInput!): Assignment!
    deleteAssignment(id: Int!): Boolean!

    createAssignmentExpertise(input: AssignmentExpertiseInput!): AssignmentExpertise!
    updateAssignmentExpertise(id: Int!, input: AssignmentExpertiseInput!): AssignmentExpertise!
    deleteAssignmentExpertise(id: Int!): Boolean!

    createAuditLogs(input: AuditLogsInput!): AuditLogs!
    updateAuditLogs(id: Int!, input: AuditLogsInput!): AuditLogs!
    deleteAuditLogs(id: Int!): Boolean!
}
